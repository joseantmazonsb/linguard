//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Linguard.Core {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Validation {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Validation() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Linguard.Core.Validation", typeof(Validation).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cannot be empty.
        /// </summary>
        public static string CannotBeEmpty {
            get {
                return ResourceManager.GetString("CannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to must begin with a letter and can only contain lowercase alphanumeric characters, underscores and hyphens.
        /// </summary>
        public static string CharactersAllowedForInterfaceName {
            get {
                return ResourceManager.GetString("CharactersAllowedForInterfaceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to contains illegal characters.
        /// </summary>
        public static string CharactersNotAllowed {
            get {
                return ResourceManager.GetString("CharactersNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is already a client with the same name.
        /// </summary>
        public static string ClientNameAlreadyInUse {
            get {
                return ResourceManager.GetString("ClientNameAlreadyInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client not found.
        /// </summary>
        public static string ClientNotFound {
            get {
                return ResourceManager.GetString("ClientNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is already a client with the same private key.
        /// </summary>
        public static string ClientPrivateKeyAlreadyInUse {
            get {
                return ResourceManager.GetString("ClientPrivateKeyAlreadyInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is already a client with the same public key.
        /// </summary>
        public static string ClientPublicKeyAlreadyInUse {
            get {
                return ResourceManager.GetString("ClientPublicKeyAlreadyInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is already an interface with the same name.
        /// </summary>
        public static string InterfaceNameAlreadyInUse {
            get {
                return ResourceManager.GetString("InterfaceNameAlreadyInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface not found.
        /// </summary>
        public static string InterfaceNotFound {
            get {
                return ResourceManager.GetString("InterfaceNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid gateway. It must be an existent network interface.
        /// </summary>
        public static string InvalidGateway {
            get {
                return ResourceManager.GetString("InvalidGateway", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to has invalid length.
        /// </summary>
        public static string InvalidLength {
            get {
                return ResourceManager.GetString("InvalidLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Port must be an integer value between 1 and 65535..
        /// </summary>
        public static string InvalidPort {
            get {
                return ResourceManager.GetString("InvalidPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cannot be less than {0} or more than {1} characters long.
        /// </summary>
        public static string ValidLengthForInterfaceName {
            get {
                return ResourceManager.GetString("ValidLengthForInterfaceName", resourceCulture);
            }
        }
    }
}
