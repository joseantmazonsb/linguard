@page "/client/{id:guid}"
@using Linguard.Core.Utils.Extensions
@using Linguard.Core.Managers
@using Linguard.Core.Models.Wireguard
@using Linguard.Core.Services
@using Linguard.Core.Utils
@using FluentValidation
@using Linguard.Core.Configuration

<PageTitle>@($"{AssemblyInfo.Product} | {Title}")</PageTitle>

@if (_client == default) {
    <p>Oops, it looks like the client you are looking for does not exist.</p>
    return;
}

<RadzenHeading Text="@Title" class="mb-3"/>
<RadzenCard>
    <RadzenAccordion Multiple="true">
        <Items>
            <RadzenAccordionItem Text="Actions" Icon="construction">
                <PeerActions Peer="_client" class="my-2 d-flex" 
                             AfterDelete="@(() => _navigationManager.NavigateTo("wireguard"))"/>
            </RadzenAccordionItem>
            <RadzenAccordionItem Selected="true" Text="Configuration" Icon="settings">
                <RadzenCard class="my-2">
                    <RadzenTemplateForm Data="@_client" Submit="@((Client args) => { Submit(args); })">
                        <ClientConfigurationForm Interface="_interface" Client="_client" ShowWireguardKeys="true" 
                                                 SubmitIcon="save" SubmitText="Save"/>
                    </RadzenTemplateForm>
                </RadzenCard>
            </RadzenAccordionItem>
            <RadzenAccordionItem Text="Traffic data" Icon="swap_vert">
                <RealTimeTraffic Peer="_client"></RealTimeTraffic>
            </RadzenAccordionItem>
        </Items>
    </RadzenAccordion>
</RadzenCard>


@inject IConfigurationManager _configurationManager
@inject IWireguardService _wireguardService
@inject NotificationService _notificationService
@inject DialogService _dialogService
@inject NavigationManager _navigationManager
@inject IJSRuntime _js
@inject AbstractValidator<Client> _validator

@code {

    const string Title = "Client";
    [Parameter]
    public Guid Id { get; set; }
    
    IConfiguration Configuration => _configurationManager.Configuration;
    Client? _client;
    Interface? _interface;
    
    protected override void OnInitialized() {
        base.OnInitialized();
        _interface = Configuration.Wireguard.GetInterface(Id);
        if (_interface == default) return;
        _client = _interface.Clients.SingleOrDefault(c => c.Id == Id);
    }

    private void Submit(Client client) {
        var result = _validator.Validate(client);
        if (result.IsValid) {
            var originalClient = _interface!.Clients.SingleOrDefault(c => c.Id == Id);
            _interface.Clients = _interface.Clients.Replace(originalClient, client).ToHashSet();
            _configurationManager.Save();
            _notificationService.Notify(NotificationSeverity.Success, "Client saved!");
            return;
        }
        _notificationService.Notify(NotificationSeverity.Error, "Unable to save client.", 
            string.Join(Environment.NewLine, result.Errors));
    }
}
