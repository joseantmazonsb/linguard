@page "/interface/{id:guid}"
@using Linguard.Core.Managers
@using Linguard.Core.Models.Wireguard
@using Linguard.Core.OS
@using Linguard.Core.Services
@using Linguard.Core.Utils
@using Linguard.Web.Services
@using FluentValidation
@using Linguard.Core.Configuration

@inject IConfigurationManager _configurationManager
@inject IWireguardService _wireguardService
@inject IWebService _webService;
@inject NotificationService _notificationService
@inject DialogService _dialogService
@inject NavigationManager _navigationManager
@inject IJSRuntime _js
@inject AbstractValidator<Interface> _validator
@inject ISystemWrapper _system

@code {
    const string Title = "Interface";
    [Parameter]
    public Guid Id { get; set; }
    
    IConfiguration Configuration => _configurationManager.Configuration;
    Interface? Iface => Configuration.Wireguard.Interfaces.SingleOrDefault(i => i.Id == Id)?.Clone() as Interface;

}
<PageTitle>@($"{AssemblyInfo.Product} | {Title}")</PageTitle>

@if (Iface == default) {
    <p>Oops, it looks like the interface you are looking for does not exist.</p>
    return;
}

<div class="row">
    <div class="col">
        <h1 class="mb-3">
            @Title
            @if (_system.IsInterfaceUp(Iface)) {
                <RadzenBadge class="float-end" IsPill="true" Text="up" BadgeStyle="BadgeStyle.Success" />
            }
            else {
                <RadzenBadge class="float-end" IsPill="true" Text="down" BadgeStyle="BadgeStyle.Danger" />
            }
        </h1>
    </div>
</div>
<RadzenCard>
    
<RadzenAccordion Multiple="true">
    <Items>
        <RadzenAccordionItem Text="Actions" Icon="construction">
            <PeerActions Peer="Iface"/>
        </RadzenAccordionItem>
        <RadzenAccordionItem Selected="true" Text="Configuration" Icon="settings">
            <RadzenCard class="my-2">
                <RadzenTemplateForm Data="@Iface" Submit="@((Interface args) => { Submit(args); })">
                    <InterfaceConfigurationForm Iface="Iface" ShowWireguardKeys="true"/>
                </RadzenTemplateForm>
            </RadzenCard>
        </RadzenAccordionItem>
        <RadzenAccordionItem Text="Clients" Icon="people">
            <RadzenCard class="my-2">
                <RadzenButton Icon="add_circle_outline" class="mb-2" Text="Add new"
                              Click=@AddClient />
                <RadzenDataGrid @ref="_clientsGrid" AllowColumnResize="true" AllowFiltering="true" AllowPaging="true"
                                AllowSorting="true" ColumnWidth="200px"
                                Data="@Iface.Clients"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                TItem="Client">
                    <Columns>
                        <RadzenDataGridColumn TItem="Client" Property="Name" Title="Name">
                            <FooterTemplate>
                                Total: <b>@Iface.Clients.Count</b>
                            </FooterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Client" Property="Description" Title="Description"/>
                        <RadzenDataGridColumn TItem="Client" Property="IPv4Address" Title="IPv4"/>
                        <RadzenDataGridColumn TItem="Client" Property="IPv6Address" Title="IPv6"/>
                        <RadzenDataGridColumn TItem="Client" Property="Nat" Title="NAT"/>
                        <RadzenDataGridColumn TItem="Client" Title="Last Handshake">
                            <Template Context="data">
                                <p>@_wireguardService.GetLastHandshake(data)</p>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Client" Title="Actions" Resizable="false"
                                              Filterable="false" Sortable="false">
                            <Template Context="data">
                                <RadzenButton Icon="download" ButtonStyle="ButtonStyle.Light" title="Download"
                                              Click="() => _webService.DownloadWireguardModel(data)"/>
                                <RadzenButton Icon="qr_code" title="Show QR code" ButtonStyle="ButtonStyle.Light"
                                                              Click="() => ShowQrCode(data)"/>
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" title="Edit"
                                              Click="() => EditWireguardClient(data)"/>
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Light" title="Delete"
                                              Click="() => ConfirmRemoveWireguardPeer(data)"/>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenCard>
        </RadzenAccordionItem>
        <RadzenAccordionItem Text="Traffic data" Icon="swap_vert">
            <RealTimeTraffic Peer="Iface"/>
        </RadzenAccordionItem>
    </Items>
</RadzenAccordion>

</RadzenCard>


@code {

    void Submit(Interface args) {
        var result = _validator.Validate(args);
        if (result.IsValid) {
            _configurationManager.Save();
            _notificationService.Notify(NotificationSeverity.Success, "Interface saved!");
            return;
        }
        _notificationService.Notify(NotificationSeverity.Error, "Unable to save interface.");
    }

    void EditWireguardClient(Client client) {
        _navigationManager.NavigateTo($"{nameof(Client).ToLower()}/{client.Id}");
    }

    async Task ConfirmRemoveWireguardPeer(IWireguardPeer peer) {
        var peerType = peer.GetType().Name.ToLower();
        var remove = await _dialogService.Confirm(
            $"Are you sure you want to delete {peer.Name}? This cannot be undone.", 
            $"Delete {peerType} {peer.Name}",
            new ConfirmOptions {
                OkButtonText = "Yes",
                CancelButtonText = "No",
                CloseDialogOnOverlayClick = true,
            });
        if (remove == default || !remove.Value) return;
        try {
            RemoveWireguardPeer(peer);
            _configurationManager.Save();
        }
        catch (Exception e) {
            _notificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Error,
                Summary = $"Unable to remove {peerType} {peer.Name}",
                Detail = e.Message
            });
        }
    }

    void RemoveWireguardPeer(IWireguardPeer peer) {
        _webService.RemoveWireguardModel(peer);
        switch (peer) {
            case Client:
                _clientsGrid.Reload();
                break;
            case Interface:
                _navigationManager.NavigateTo("wireguard");
                break;
        }
    }

    RadzenDataGrid<Client> _clientsGrid;

    void AddClient() {
        _navigationManager.NavigateTo(
            $"/{nameof(Interface)}/{Iface.Id}/add-{nameof(Client).ToLower()}");
    }
    
    async Task ShowQrCode(IWireguardPeer peer) {
        var qr = $"data:image/png;base64, {Convert.ToBase64String(_webService.GetQrCode(peer))}" ;
        await _dialogService.OpenAsync($"Configuration of {peer.Name}", ds =>
            @<div>
                <div class="row">
                    <div class="col text-center">
                        <RadzenImage Path="@qr" Style="display: block; width: 25rem;"/>
                    </div>
                </div>
            </div>, 
            new DialogOptions {
                Style = "min-height:auto;min-width:auto;width:auto"
            }
            );
    }
}