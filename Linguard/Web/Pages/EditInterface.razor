@page "/interface/{id:guid}"
@using Linguard.Core.Utils.Extensions
@using Linguard.Core.Managers
@using Linguard.Core.Models.Wireguard
@using Linguard.Core.OS
@using Linguard.Core.Services
@using Linguard.Core.Utils
@using Linguard.Web.Services
@using FluentValidation
@using Linguard.Core.Configuration
@using Linguard.Web.Helpers

@inject IConfigurationManager _configurationManager
@inject IWireguardService _wireguardService
@inject IWebHelper _webHelper;
@inject NotificationService _notificationService
@inject DialogService _dialogService
@inject NavigationManager _navigationManager
@inject IJSRuntime _js
@inject AbstractValidator<Interface> _validator
@inject ISystemWrapper _system

@code {
    const string Title = "Interface";
    [Parameter]
    public Guid Id { get; set; }
    
    IConfiguration Configuration => _configurationManager.Configuration;
    Interface? _iface;

}
<PageTitle>@($"{AssemblyInfo.Product} | {Title}")</PageTitle>

@if (_iface == default) {
    <p>Oops, it looks like the interface you are looking for does not exist.</p>
    return;
}

<div class="row">
    <div class="col">
        <h1 class="mb-3">
            @Title
            @if (_system.IsInterfaceUp(_iface)) {
                <RadzenBadge class="float-end" IsPill="true" Text="up" BadgeStyle="BadgeStyle.Success" />
            }
            else {
                <RadzenBadge class="float-end" IsPill="true" Text="down" BadgeStyle="BadgeStyle.Danger" />
            }
        </h1>
    </div>
</div>
<RadzenCard>
    
<RadzenAccordion Multiple="true">
    <Items>
        <RadzenAccordionItem Text="Actions" Icon="construction">
            <PeerActions Peer="_iface" class="my-2 d-flex"
                         AfterDelete="@(() => _navigationManager.NavigateTo("wireguard"))"/>
        </RadzenAccordionItem>
        <RadzenAccordionItem Selected="true" Text="Configuration" Icon="settings">
            <RadzenCard class="my-2">
                <RadzenTemplateForm Data="@_iface" Submit="@((Interface args) => { Submit(args); })">
                    <InterfaceConfigurationForm Iface="_iface" ShowWireguardKeys="true"
                                                SubmitIcon="save" SubmitText="Save"/>
                </RadzenTemplateForm>
            </RadzenCard>
        </RadzenAccordionItem>
        <RadzenAccordionItem Text="Clients" Icon="people">
            <RadzenCard class="my-2">
                <RadzenButton Icon="add" class="mb-2" Text="Add new"
                              Click=@AddClient />
                <RadzenDataGrid @ref="_clientsGrid" AllowColumnResize="true" AllowFiltering="true" AllowPaging="true"
                                AllowSorting="true" ColumnWidth="200px"
                                Data="@_iface.Clients"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                TItem="Client">
                    <Columns>
                        <RadzenDataGridColumn TItem="Client" Property="Name" Title="Name">
                            <FooterTemplate>
                                Total: <b>@_iface.Clients.Count</b>
                            </FooterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Client" Property="Description" Title="Description"/>
                        <RadzenDataGridColumn TItem="Client" Property="IPv4Address" Title="IPv4"/>
                        <RadzenDataGridColumn TItem="Client" Property="IPv6Address" Title="IPv6"/>
                        <RadzenDataGridColumn TItem="Client" Title="NAT">
                            <Template Context="client">
                                @(client.Nat ? "Yes" : "No")
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Client" Title="Last Handshake">
                            <Template Context="data">
                                @{var handshake = _wireguardService.GetLastHandshake(data);}
                                @(handshake == default ? "None" : handshake)
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Client" Title="Actions" Resizable="false"
                                              Filterable="false" Sortable="false">
                            <Template Context="client">
                                <PeerActions Peer="client" EnableEdit="true" 
                                             AfterDelete="() => RemoveWireguardPeer(client)"/>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenCard>
        </RadzenAccordionItem>
        <RadzenAccordionItem Text="Traffic data" Icon="swap_vert">
            <RealTimeTraffic Peer="_iface"/>
        </RadzenAccordionItem>
    </Items>
</RadzenAccordion>

</RadzenCard>


@code {

    protected override void OnInitialized() {
        base.OnInitialized();
        _iface = Configuration.GetModule<IWireguardConfiguration>()!.Interfaces.SingleOrDefault(i => i.Id == Id)?.Clone() as Interface;
    }

    void Submit(Interface iface) {
        var result = _validator.Validate(iface);
        if (result.IsValid) {
            var originalIface = Configuration.GetModule<IWireguardConfiguration>()!.Interfaces.SingleOrDefault(i => i.Id == Id);
            Configuration.GetModule<IWireguardConfiguration>()!.Interfaces = Configuration.GetModule<IWireguardConfiguration>()!.Interfaces
                .Replace(originalIface, iface)
                .ToHashSet();
            _configurationManager.Save();
            _notificationService.Notify(NotificationSeverity.Success, "Interface saved!");
            return;
        }
        _notificationService.Notify(NotificationSeverity.Error, "Unable to save interface.", 
            string.Join(Environment.NewLine, result.Errors));
    }
    
    void RemoveWireguardPeer(IWireguardPeer peer) {
        switch (peer) {
            case Client:
                _clientsGrid.Reload();
                break;
            case Interface:
                _navigationManager.NavigateTo("wireguard");
                break;
        }
    }

    RadzenDataGrid<Client> _clientsGrid;

    void AddClient() {
        _navigationManager.NavigateTo(
            $"/{nameof(Interface)}/{_iface.Id}/add-{nameof(Client).ToLower()}");
    }
}