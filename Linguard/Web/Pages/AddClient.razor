@page "/interface/{interfacePublicKey}/add-client"
@using Linguard.Core.Managers
@using Linguard.Core.Models.Wireguard
@using Linguard.Core.Services
@using Linguard.Core.Utils
@using FluentValidation
@using Linguard.Core.Configuration

<PageTitle>@($"{AssemblyInfo.Product} | {Title}")</PageTitle>

@if (Interface == default) {
    <p>Oops, it looks like the interface you want to create a client for does not exist.</p>
    return;
}

<div class="mb-3">
    <RadzenHeading Text="@Title" class="d-inline"/>
    <RadzenButton class="d-inline float-end" Text="Import" Icon="upload" ButtonStyle="ButtonStyle.Secondary"
                  Click="@(() => _navigationManager.NavigateTo($"/import-{nameof(Client).ToLower()}"))"/>
</div>

<RadzenCard class="my-2">
    <RadzenTemplateForm Data="@Client" Submit="@((Client args) => { Submit(args); })">
        <ClientConfigurationForm Client="Client" Interface="Interface" SubmitText="Create"/>
    </RadzenTemplateForm>
</RadzenCard>

@inject IConfigurationManager _configurationManager
@inject IWireguardService _wireguardService
@inject NotificationService _notificationService
@inject DialogService _dialogService
@inject NavigationManager _navigationManager
@inject IJSRuntime _js
@inject AbstractValidator<Client> _validator
@inject IClientGenerator _generator


@code {
    const string Title = "Add client";
    
    [Parameter]
    public string InterfacePublicKey { get; set; }
    
    IConfiguration Configuration => _configurationManager.Configuration;
    private Interface? Interface { get; set; }
    private Client Client { get; set; }
    
    protected override void OnInitialized() {
        Interface = Configuration.GetModule<IWireguardConfiguration>()!.Interfaces
            .SingleOrDefault(i => i.PublicKey.Equals(InterfacePublicKey));
        if (Interface == default) return;
        Client = _generator.Generate(Interface);
    }

    private void Submit(Client client) {
        var result = _validator.Validate(client);
        if (result.IsValid) {
            _wireguardService.AddClient(Interface, client);
            Interface!.Clients.Add(client);
            _configurationManager.Save();
            _navigationManager.NavigateTo("wireguard");
            return;
        }
        _notificationService.Notify(NotificationSeverity.Error, "Unable to add client.", 
            string.Join(Environment.NewLine, result.Errors));
    }
}
