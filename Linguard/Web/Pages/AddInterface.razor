@page "/add-interface"
@using Linguard.Core.Managers
@using Linguard.Core.Models.Wireguard
@using Linguard.Core.Services
@using Linguard.Core.Utils
@using Linguard.Web.Services
@using FluentValidation
@using Linguard.Core.Configuration
@using Linguard.Web.Helpers

@inject IConfigurationManager _configurationManager
@inject IWireguardService _wireguardService
@inject IWebHelper _webHelper;
@inject NotificationService _notificationService
@inject NavigationManager _navigationManager
@inject IJSRuntime _js
@inject AbstractValidator<Interface> _validator
@inject IInterfaceGenerator _generator

@code {
    const string Title = "Add interface";
    [Parameter]
    public Guid Id { get; set; }
    
    IConfiguration Configuration => _configurationManager.Configuration;
    Interface Iface { get; set; }

    protected override void OnInitialized() {
        base.OnInitialized();
        Iface = _generator.Generate();
    }

}
<PageTitle>@($"{AssemblyInfo.Product} | {Title}")</PageTitle>

<div class="mb-3">
    <RadzenHeading Text="@Title" class="d-inline"/>
    <RadzenButton class="d-inline float-end" Text="Import" Icon="upload" ButtonStyle="ButtonStyle.Secondary" 
                  Click="@(() => _navigationManager.NavigateTo($"/import-{nameof(Interface).ToLower()}"))"/>
</div>

<RadzenCard class="mb-3">
    <RadzenTemplateForm Data="@Iface" Submit="@((Interface args) => { Submit(args); })">
        <InterfaceConfigurationForm Iface="Iface" ShowWireguardKeys="false" SubmitText="Create"/>
    </RadzenTemplateForm>
</RadzenCard>

@code {

    RadzenDataGrid<string> _onUpGrid;
    RadzenDataGrid<string> _onDownGrid;

    void Submit(Interface iface) {
        var result = _validator.Validate(iface);
        if (result.IsValid) {
            Configuration.Wireguard.Interfaces.Add(iface);
            _configurationManager.Save();
            _navigationManager.NavigateTo("wireguard");
            return;
        }
        _notificationService.Notify(NotificationSeverity.Error, "Unable to add interface.", 
            string.Join(Environment.NewLine, result.Errors));
    }
}