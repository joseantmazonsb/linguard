@page "/login"
@layout LoginLayout
@using Linguard.Core.Utils
@using Linguard.Web.Shared.Layouts
@using Microsoft.AspNetCore.WebUtilities
@using global::Auth.Models
@using Linguard.Web.Configuration
@using Linguard.Web.Services
@using global::Auth.Exceptions

<PageTitle>@($"{AssemblyInfo.Product} | Sign in")</PageTitle>

<RadzenHeading Text="Hello there!" class="mb-3 text-center"/>
<RadzenCard class="w-100" Style="margin-bottom: 10rem">
    <RadzenTemplateForm Data="@("")">
        <RadzenLogin AllowResetPassword="false" AllowRegister="false" Login="DoLogin"/>
    </RadzenTemplateForm>
</RadzenCard>

@inject NotificationService _notificationService
@inject ILogger<Login> _logger
@inject NavigationManager _navigationManager
@inject IAuthenticationService _authenticationService
@inject IConfigurationManager _configurationManager

@code {

    private async void DoLogin(LoginArgs args) {
        var bannedFor = _authenticationService.BannedFor;
        if (bannedFor > TimeSpan.Zero) {
            var seconds = bannedFor.Seconds > 0 ? bannedFor.Seconds : 1;
            _notificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Error,
                Summary = "Too many failed attempts",
                Detail = $"Try again in {seconds} seconds."
            });
            return;
        }
        try {
            var credentials = new Credentials(args.Username, args.Password);
            var result = await _authenticationService.Login(credentials);
            if (result.User.Identity is {IsAuthenticated: false }) {
                _logger.LogError("Login failed: unable to authenticate user.");
                _notificationService.Notify(new NotificationMessage {
                    Severity = NotificationSeverity.Error,
                    Summary = "Failed to log in",
                    Detail = $"User {result.User.Identity.Name} could not be logged in."
                });
                return;
            }
            Redirect();
        }
        catch (Exception e) {
            if (e is LoginException) {
                _logger.LogError($"Login failed: unable to authenticate user. {e.Message}");
            }
            else {
                _logger.LogError(e, "Login failed: unable to authenticate user.");
            }
            _notificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Error,
                Summary = "Failed to log in",
                Detail = e.Message
            });
        }
    }

    private void Redirect() {
        _logger.LogInformation("Login completed. Redirecting...");
        var query = _navigationManager.ToAbsoluteUri(_navigationManager.Uri).Query;
        var hasReturnUrl = QueryHelpers.ParseQuery(query).TryGetValue("returnUrl", out var returnUrl);
        var newUrl = hasReturnUrl ? returnUrl.ToString() : "/";
        _navigationManager.NavigateTo(newUrl);
    }
}
