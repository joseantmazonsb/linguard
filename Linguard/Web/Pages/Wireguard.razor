@page "/wireguard"
@using Linguard.Core.Managers
@using Linguard.Core.Models.Wireguard
@using Linguard.Core.OS
@using Linguard.Core.Services
@using Linguard.Core.Utils
@using Linguard.Web.Services
@using Linguard.Core.Configuration
@using Linguard.Web.Helpers

<PageTitle>@($"{AssemblyInfo.Product} | {Title}")</PageTitle>

<RadzenHeading Text="@Title" class="mb-3"/>

<h2 class="mb-3">Interfaces</h2>
<RadzenSplitButton Icon="add" class="mb-2" Text="Add new" Click="@AddInterface">
    <ChildContent>
        <RadzenSplitButtonItem Text="Import" Icon="upload" />
    </ChildContent>
</RadzenSplitButton>
<RadzenDataGrid @ref="_interfacesGrid" AllowColumnResize="true" AllowFiltering="true" AllowPaging="true"
                AllowSorting="true" ColumnWidth="200px"
                Data="@_wireguardInterfaces"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                TItem="Interface">
    <Columns>
        <RadzenDataGridColumn TItem="Interface" Property="Name" Title="Name">
            <FooterTemplate>
                Total: <b>@_wireguardInterfaces.Count</b>
            </FooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Interface" Property="Description" Title="Description"/>
        <RadzenDataGridColumn TItem="Interface" Title="Auto">
            <Template Context="iface">
                @(iface.Auto ? "Yes" : "No")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Interface" Title="IPv4">
            <Template Context="iface">
                @(iface.IPv4Address == default ? "None" : iface.IPv4Address.ToString())
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Interface" Title="IPv6">
            <Template Context="iface">
                @(iface.IPv6Address == default ? "None" : iface.IPv6Address.ToString())
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Interface" Title="Gateway" Property="Gateway.Name"/>
        <RadzenDataGridColumn TItem="Interface" Title="Clients">
            <Template Context="iface">@iface.Clients.Count</Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Interface" Title="Actions" Resizable="false" 
                              Filterable="false" Sortable="false">
            <Template Context="iface">
                <PeerActions Peer="iface" EnableEdit="true" 
                             AfterDelete="() => RemoveWireguardModel(iface)"/>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
@if (_wireguardInterfaces.Any()) {
    <div class="d-flex flex-row mt-2 mb-3">
        <RadzenButton class="me-2" Text="Start all" ButtonStyle="ButtonStyle.Success" Icon="play_arrow" 
                      IsBusy="@_startingAll" Click="@StartAllInterfaces" />
        <RadzenButton Text="Stop all" ButtonStyle="ButtonStyle.Danger" Icon="stop" 
                      IsBusy="@_stoppingAll" Click="@StopAllInterfaces" />
    </div>
}

<h2 class="my-3">Clients</h2>
<RadzenSplitButton Click="AddClient" Text="Add new" Icon="add" class="mb-2">
    <ChildContent>
        <RadzenSplitButtonItem Text="Import" Icon="upload"/>
    </ChildContent>
</RadzenSplitButton>
<RadzenDataGrid @ref="_clientsGrid" AllowColumnResize="true" AllowFiltering="true" AllowPaging="true"
                AllowSorting="true" ColumnWidth="200px"
                Data="@_clients"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                TItem="Client">
    <Columns>
        <RadzenDataGridColumn TItem="Client" Property="Name" Title="Name">
            <FooterTemplate>
                Total: <b>@_clients.Count</b>
            </FooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Client" Property="Description" Title="Description"/>
        <RadzenDataGridColumn TItem="Client" Title="IPv4">
            <Template Context="client">
                @(client.IPv4Address == default ? "None" : client.IPv4Address.ToString())
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Client" Title="IPv6">
            <Template Context="client">
                @(client.IPv6Address == default ? "None" : client.IPv6Address.ToString())
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Client" Title="NAT">
            <Template Context="client">
                @(client.Nat ? "Yes" : "No")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Client" Title="Interface">
            <Template Context="data">
                <a href="/interface/@(Configuration.Wireguard.GetInterface(data)?.Id)">
                    @(Configuration.Wireguard.GetInterface(data)?.Name)
                </a>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Client" Title="Actions" Resizable="false"
                              Filterable="false" Sortable="false">
            <Template Context="client">
                <PeerActions Peer="client" EnableEdit="true" 
                             AfterDelete="() => RemoveWireguardModel(client)"/>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@inject IConfigurationManager _configurationManager
@inject IWebHelper _webHelper
@inject NotificationService _notificationService
@inject DialogService _dialogService
@inject NavigationManager _navigationManager
@inject IJSRuntime _js
@inject IWireguardService _wireguardService
@inject ISystemWrapper _systemWrapper

@code {
    const string Title = "Wireguard";
    IConfiguration Configuration => _configurationManager.Configuration;
    ICollection<Interface> _wireguardInterfaces;
    ICollection<Client> _clients;
    bool _startingAll;
    bool _stoppingAll;

    protected override void OnInitialized() {
        _wireguardInterfaces = Configuration.Wireguard.Interfaces
            .OrderBy(i => i.Name)
            .ToList();
        _clients = _wireguardInterfaces
            .SelectMany(i => i.Clients)
            .OrderBy(c => c.Name)
            .ToList();
    }

    void StartInterface(Interface iface) {
        try {
            _wireguardService.StartInterface(iface);
            _interfacesGrid.Reload();
        }
        catch (Exception e) {
            _notificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Error,
                Summary = $"Unable to start interface {iface.Name}",
                Detail = e.Message
            });
        }
    }
    
    void StopInterface(Interface @interface) {
        try {
            _wireguardService.StopInterface(@interface);
            _interfacesGrid.Reload();
        }
        catch (Exception e) {
            _notificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Error,
                Summary = $"Unable to stop interface {@interface.Name}",
                Detail = e.Message
            });
        }
    }
    
    void StopAllInterfaces() {
        _stoppingAll = true;
        foreach (var iface in Configuration.Wireguard.Interfaces) {
            StopInterface(iface);
        }
        _stoppingAll = false;
    }
    
    void StartAllInterfaces() {
        _startingAll = true;
        foreach (var iface in Configuration.Wireguard.Interfaces) {
            StartInterface(iface);
        }
        _startingAll = false;
    }

    void EditWireguardPeer(IWireguardPeer peer) {
        var modelType = peer.GetType().Name.ToLower();
        _navigationManager.NavigateTo($"{modelType}/{peer.Id}");
    }

    private RadzenDropDown<string> _addClientInterfaces;
    
    async Task AddClient(RadzenSplitButtonItem? item) {
        if (!_wireguardInterfaces.Any()) {
            _notificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Error,
                Summary = "Unable to add client",
                Detail = "There are no interfaces yet!"
            });
            return;
        }
        if (item != default) {
            ImportClient();
            return;
        }
        await _dialogService.OpenAsync("Add client", ds =>
            @<div>
                <h3>Interface</h3>
                <div>
                    <div class="row">
                        <div class="col">
                            <RadzenDropDown @ref="@_addClientInterfaces" TValue="string" AllowClear="false" Placeholder="Select an interface"
                                            Data="_wireguardInterfaces.Select(i => i.Name)"/>                        
                        </div>                    
                    </div>
                    <div class="row mt-2">
                       <div class="col">
                           <RadzenButton Icon="add" Text="Add"
                                         Click="@AddClient"/>                            
                        </div>                         
                    </div>
                </div>
            </div>, 
            new DialogOptions {
                Style = "min-height:auto;min-width:auto;width:auto",
                CloseDialogOnOverlayClick = true
            }
        );
    }

    void AddClient() {
        var item = _addClientInterfaces.SelectedItem;
        if (item == default) return;
        var iface = _wireguardInterfaces.Single(i => i.Name.Equals(item));
        _navigationManager.NavigateTo($"/{nameof(Interface).ToLower()}/{iface.Id}/add-{nameof(Client).ToLower()}");
    }
    
    void AddInterface(RadzenSplitButtonItem? item) {
        if (item != default) {
            ImportInterface();
            return;
        }
        _navigationManager.NavigateTo($"/add-{nameof(Interface).ToLower()}");
    }

    void RemoveWireguardModel(IWireguardPeer peer) {
        switch (peer) {
            case Client client:
                RemoveClient(client);
                break;
            case Interface iface:
                RemoveInterface(iface);
                break;
        }
    }
    
    RadzenDataGrid<Client> _clientsGrid;
    RadzenDataGrid<Interface> _interfacesGrid;
    
    void RemoveClient(Client client) {
        _clients.Remove(client);
        _clientsGrid.Reload();
    }
    
    void RemoveInterface(Interface iface) {
        _wireguardInterfaces.Remove(iface);
        _interfacesGrid.Reload();
    }

    private void ImportInterface() {
        _navigationManager.NavigateTo($"/import-{nameof(Interface).ToLower()}");
    }
    
    private void ImportClient() {
        _navigationManager.NavigateTo($"/import-{nameof(Client).ToLower()}");
    }
}
