@using Linguard.Core.Models
@using System.Security.Claims
@using Linguard.Web.Services
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
<div class="d-flex align-items-center justify-content-end">
    <RadzenDropDown TValue="string" AllowClear="false" class="mx-0 mx-lg-3" 
                    Data="@(Enum.GetNames(typeof(Style)).Select(s => $"{s} Theme").OrderBy(s => s))"
                    Value="@($"{Style.Default} Theme")"
                    ValueChanged="OnStyleChanged">
    </RadzenDropDown>
    <RadzenProfileMenu class="text-end" Click="MenuClick">
        <Template>
            <RadzenGravatar Email="@GravatarEmail"/>
        </Template>
        <ChildContent>
            <RadzenProfileMenuItem Text="@GreetingMessage"/>
            <hr class="my-0 mx-1"/>
            <RadzenProfileMenuItem Text="Account" Path="account" Icon="account_circle"/>
            <RadzenProfileMenuItem Text="Log out" Path="/" Icon="logout" Value="logout"/>
        </ChildContent>
    </RadzenProfileMenu>
</div>

@inject AuthenticationStateProvider _authenticationStateProvider
@inject IJSRuntime _jsRuntime
@inject IAuthenticationService _authenticationService
@inject UserManager<IdentityUser> _userManager
@inject IStateHasChangedNotifierService _notifier

@code {

    IdentityUser? _user;
    string? _email;
    string GreetingMessage => $"Hi, {_user?.UserName}";
    string GravatarEmail => _email ?? "user@example.com";
    
    async Task OnStyleChanged(string value) {
        var styleName = value.Split(" ").First();
        var style = Enum.Parse<Style>(styleName);
        await _jsRuntime.InvokeVoidAsync("setStylesheet", 
            StyleUtils.GetStylesheet(style));
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.Claims.SingleOrDefault(c => c.Type.Equals(ClaimTypes.NameIdentifier));
        _user = await _userManager.FindByIdAsync(userId?.Value);
        _notifier.Subscribe((_, _) => {
            StateHasChanged();
        });
    }
    
    private void Logout() {
        _authenticationService.Logout();
    }

    private void MenuClick(RadzenProfileMenuItem args) {
        if (args.Value != "logout") return;
        Logout();
    }

}
