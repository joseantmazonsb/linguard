@using Linguard.Core.OS
@using Linguard.Core.Models.Wireguard
@using Linguard.Core.Models.Wireguard.Validators
@namespace Linguard.Web.Shared

<div>
    <!-- Name and description -->
    <div class="row">
        <div class="col-md-6">
            <div class="row mb-2">
                <div class="col">
                    <RadzenLabel Text="Name"/>
                </div>
            </div>
            <div class="row mb-2">
                <div class="col-xxl-10">
                    <RadzenTextBox Placeholder="wg0" Trim="true" Value="@Iface.Name"
                                   Style="width: 100%" MaxLength="@InterfaceValidator.MaxNameLength"/>
                </div>
            </div>
            <div class="row mb-2">
                <div class="col">
                    <RadzenLabel Text="Description"/>
                </div>
            </div>
            <div class="row mb-2">
                <div class="col-xxl-10">
                    <RadzenTextArea Placeholder="A brief (or long) description" Trim="true"
                                    Value="@Iface.Description" Style="width: 100%"/>
                </div>
            </div>
        </div>
    </div>
    <!-- Default endpoint and dns -->
    <div class="row mb-2">
        <div class="col-md-6">
            <div class="row">
                <div class="col">
                    <RadzenLabel class="mb-2" Text="Endpoint"/>
                </div>
            </div>
            <div class="row">
                <div class="col-xxl-10">
                    <RadzenTextBox class="w-100" Value="@Iface.Endpoint?.ToString()" Placeholder="vpn.example.com"/>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6 mb-2">
            <div class="row">
                <div class="col">
                    <RadzenLabel class="mb-2" Text="Primary DNS"/>
                </div>
            </div>
            <div class="row">
                <div class="col-xxl-10">
                    <RadzenTextBox class="w-100" Value="@Iface.PrimaryDns?.ToString()" Placeholder="dns1.example.com"/>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="row">
                <div class="col">
                    <RadzenLabel class="mb-2" Text="Secondary DNS"/>
                </div>
            </div>
            <div class="row">
                <div class="col-xxl-10">
                    <RadzenTextBox class="w-100" Value="@Iface.SecondaryDns?.ToString()" Placeholder="dns2.example.com"/>
                </div>
            </div>
        </div>
    </div>
    <!-- Gateway and port -->
    <div class="row">
        <div class="col-md-6">
            <div class="row mb-2">
                <div class="col">
                    <RadzenLabel Text="Gateway"/>
                </div>
            </div>
            <div class="row mb-2">
                <div class="col-xxl-10">
                    <RadzenDropDown TValue="string" AllowClear="false" Placeholder="Select a gateway"
                                    Data="@InterfaceNames" Value="@Iface.Gateway.Name"
                                    Change="OnGatewayChanged" Style="width: 100%">
                    </RadzenDropDown>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="row mb-2">
                <div class="col">
                    <RadzenLabel Text="Port"/>
                </div>
            </div>
            <div class="row mb-2">
                <div class="col-xxl-10">
                    <RadzenNumeric TValue="int" Placeholder="1337" Min="1" Max="65535"
                                   Value="@Iface.Port"
                                   Style="width: 100%"/>
                </div>
            </div>
        </div>
    </div>
    <!-- Addresses -->
    <div class="row">
        <div class="col-md-6">
            <div class="row mb-2">
                <div class="col">
                    <RadzenLabel Text="IPv4"/>
                </div>
            </div>
            <div class="row mb-2">
                <div class="col-xxl-10">
                    <RadzenTextBox Placeholder="0.0.0.0/24" Trim="true" 
                                   Value="@Iface.IPv4Address.ToString()"
                                   Style="width: 100%"/>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="row mb-2">
                <div class="col">
                    <RadzenLabel Text="IPv6"/>
                </div>
            </div>
            <div class="row mb-2">
                <div class="col-xxl-10">
                    <RadzenTextBox Placeholder="43bf:534f:a9b2:8773:0545:8963:fc28:80fd" 
                                   Trim="true" Value="@Iface.IPv6Address.ToString()"
                                   Style="width: 100%"/>
                </div>
            </div>
        </div>
    </div>
    <!-- Keys -->
    @if (ShowWireguardKeys) {
        <div class="row">
            <div class="col-md-6">
                <div class="row mb-2">
                    <div class="col">
                        <RadzenLabel Text="Public key"/>
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col-xxl-10">
                        <RadzenTextBox Trim="true" Value="@Iface.PublicKey"
                                       Style="width: 100%" Disabled="true"/>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="row mb-2">
                    <div class="col">
                        <RadzenLabel Text="Private key"/>
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col-xxl-10">
                        <RadzenTextBox Trim="true" Value="@Iface.PrivateKey"
                                       Style="width: 100%" Disabled="true"/>
                    </div>
                </div>
            </div>
        </div>
    }
    <!-- Rules -->
    <div class="row">
        <div class="col-md-6">
            <div class="row mb-2">
                    <div class="col">
                        <RadzenLabel Text="On up"/>
                    </div>
            </div>
            <div class="row mb-2">
                <div class="col-xxl-10">
                    <RadzenDataGrid @ref="_onUpGrid" AllowColumnResize="true" AllowFiltering="true" AllowPaging="true"
                                    AllowSorting="true" EditMode="DataGridEditMode.Single"
                                    Data="@Iface.OnUp"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    TItem="Rule">
                        <Columns>
                            <RadzenDataGridColumn TItem="Rule" Property="Command" Title="Rule">
                                <EditTemplate Context="data">
                                    <RadzenTextBox @bind-Value="@data.Command" class="w-100"/>
                                </EditTemplate>
                                <FooterTemplate>
                                    Total: <b>@Iface.OnUp.Count</b>
                                </FooterTemplate>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Rule" Title="Actions" Resizable="false"
                                                  Filterable="false" Sortable="false" Width="120px">
                                <Template Context="data">
                                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" title="Edit"
                                                  Click="_ => EditRow(data, _onUpGrid)"/>
                                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Light" title="Delete"
                                                  Click="_ => DeleteRow(data, _onUpGrid)"/>
                                </Template>
                                <EditTemplate Context="data">
                                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Class="m-1"
                                                  Click="_ => SaveRow(data, _onUpGrid)"/>
                                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1"
                                                  Click="_ => CancelEditRow(data, _onUpGrid)"/>
                                </EditTemplate>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
            <div class="row mb-2">
                <div class="col">
                    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add rule"
                                  ButtonStyle="ButtonStyle.Secondary"
                                  Click="() => AddRow(_onUpGrid)"/>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="row mb-2">
                <div class="col">
                    <RadzenLabel Text="On down"/>
                </div>
            </div>
            <div class="row mb-2">
                <div class="col-xxl-10">
                    <RadzenDataGrid @ref="_onDownGrid" TItem="Rule" AllowColumnResize="true" AllowFiltering="true" 
                                    AllowPaging="true" AllowSorting="true" EditMode="DataGridEditMode.Single" 
                                    Data="@Iface.OnDown" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                        <Columns>
                            <RadzenDataGridColumn TItem="Rule" Title="Rule" Property="Command">
                                <EditTemplate Context="data">
                                    <RadzenTextBox @bind-Value="@data.Command" class="w-100"/>
                                </EditTemplate>
                                <FooterTemplate>
                                    Total: <b>@Iface.OnDown.Count</b>
                                </FooterTemplate>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Rule" Title="Actions" Resizable="false"
                                                  Filterable="false" Sortable="false" Width="120px">
                                <Template Context="data">
                                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" title="Edit"
                                                  Click="_ => EditRow(data, _onDownGrid)"/>
                                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Light" title="Delete"
                                                  Click="_ => DeleteRow(data, _onDownGrid)"/>
                                </Template>
                                <EditTemplate Context="data">
                                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Class="m-1"
                                                  Click="_ => SaveRow(data, _onDownGrid)"/>
                                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1"
                                                  Click="_ => CancelEditRow(data, _onDownGrid)"/>
                                </EditTemplate>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
            <div class="row mb-2">
                <div class="col">
                    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add rule"
                                  ButtonStyle="ButtonStyle.Secondary" 
                                  Click="() => _onDownGrid.InsertRow(new Rule())"/>
                </div>
            </div>
        </div>
    </div>
    <!-- Auto switch -->
    <div class="row mb-2">
        <div class="col-xxl-10">
            <div class="row mb-2">
                <div class="col">
                    <p>Auto</p>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex">
                    <RadzenSwitch Value="@Iface.Auto" Change="b => Iface.Auto = b"/>
                </div>
            </div>
        </div>
    </div>
    <!-- Submit button -->
    <div class="row mt-3 d-flex">
        <div class="col-md-12 align-items-end">
            <RadzenButton ButtonType="ButtonType.Submit" Icon="@SubmitIcon" Text="@SubmitText" class="me-2"
                          ButtonStyle="ButtonStyle.Primary"/>
        </div>
    </div>
</div>

@inject ISystemWrapper _system

@code {
    [Parameter]
    public Interface Iface { get; set; }
    
    [Parameter]
    public bool ShowWireguardKeys { get; set; }

    [Parameter]
    public string SubmitText { get; set; } = "Save";

    [Parameter]
    public string SubmitIcon { get; set; } = "save";
    
    RadzenDataGrid<Rule> _onUpGrid;
    RadzenDataGrid<Rule> _onDownGrid;

    private string previousRuleCommand = string.Empty;
    private bool _appendingRule;
    
    IEnumerable<string> InterfaceNames => _system.NetworkInterfaces
        .Select(i => i.Name)
        //.Concat(Configuration.Interfaces.Select(i => i.Name))
        //.Distinct()
        .OrderBy(n => n);
    
    void OnGatewayChanged(object gatewayName) {
        Iface.Gateway = _system.NetworkInterfaces
            .SingleOrDefault(i => i.Name.Equals(gatewayName))!;
    }
    
    async Task EditRow(Rule data, RadzenDataGrid<Rule> grid) {
        previousRuleCommand = new string(data.Command);
        await grid.EditRow(data);
    }
    
    async Task SaveRow(Rule data, RadzenDataGrid<Rule> grid) {
        previousRuleCommand = string.Empty;
        await grid.UpdateRow(data);
        _appendingRule = false;
    }
    
    async Task CancelEditRow(Rule data, RadzenDataGrid<Rule> grid) {
        data.Command = previousRuleCommand;
        previousRuleCommand = string.Empty;
        grid.CancelEditRow(data);
        if (_appendingRule) {
            await DeleteRow(data, grid);
        }
        _appendingRule = false;
    }
    
    async Task DeleteRow(Rule data, RadzenDataGrid<Rule> grid) {
        if (grid.Equals(_onDownGrid)) Iface.OnDown.Remove(data);
        else if (grid.Equals(_onUpGrid)) Iface.OnUp.Remove(data);
        await grid.Reload();
    }

    async Task AddRow(RadzenDataGrid<Rule> grid) {
        _appendingRule = true;
        var rule = new Rule();
        if (grid.Equals(_onDownGrid)) Iface.OnDown.Add(rule);
        else if (grid.Equals(_onUpGrid)) Iface.OnUp.Add(rule);
        await grid.Reload();
        await EditRow(rule, grid);
    }
}