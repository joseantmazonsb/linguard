@using Linguard.Web.Services
@using Linguard.Core.Services
@using Linguard.Core.OS
@using Linguard.Core.Models.Wireguard
@using Linguard.Web.Helpers
<div @attributes="@CapturedAttributes">
    <div class="row">
        <div class="col-md-12 align-items-end">
            @if (Peer is Interface iface) {
                @if (_system.IsInterfaceUp(iface)) {
                    <RadzenButton Icon="stop" ButtonStyle="ButtonStyle.Danger" title="Stop"
                                  Click="StopInterface"/>
                }
                else {
                    <RadzenButton Icon="play_arrow" ButtonStyle="ButtonStyle.Success" title="Start"
                                  Click="StartInterface"/>
                }
            }
            @if (EnableEdit) {
                <RadzenButton ButtonType="ButtonType.Button" Icon="edit" title="Edit"
                              ButtonStyle="ButtonStyle.Light"
                              Click="() => EditWireguardPeer(Peer)"/>
            }
            <RadzenButton ButtonType="ButtonType.Button" Icon="download" title="Download"
                          ButtonStyle="ButtonStyle.Light"
                          Click="() => _webHelper.DownloadWireguardModel(Peer)"/>
            <RadzenButton ButtonType="ButtonType.Button" Icon="qr_code" title="Show QR code"
                          ButtonStyle="ButtonStyle.Light"
                          Click="() => ShowQrCode(Peer)"/>
            <RadzenButton ButtonType="ButtonType.Button" Icon="delete"
                          ButtonStyle="ButtonStyle.Light" title="Delete"
                          Click="() => ConfirmRemoveWireguardPeer(Peer)"/>
        </div>
    </div>
</div>

@inject IWebHelper _webHelper;
@inject NotificationService _notificationService
@inject DialogService _dialogService
@inject NavigationManager _navigationManager
@inject IWireguardService _wireguardService
@inject ISystemWrapper _system

@code {
    
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string,object> CapturedAttributes { get; set; }
    
    [Parameter]
    public IWireguardPeer Peer { get; set; }
    
    [Parameter]
    public bool EnableEdit { get; set; }
    
    [Parameter]
    public Action? AfterDelete { get; set; }
    
    [Parameter]
    public bool ReloadPageAfterInterfaceStatusChanged { get; set; }
    
    #region Interface only methods
    
    void StartInterface() {
        try {
            _wireguardService.StartInterface((Interface) Peer);
            if (!ReloadPageAfterInterfaceStatusChanged) return;
            // TODO: find a more elegant way to update the up/down badge
            _navigationManager.NavigateTo(_navigationManager.Uri, true);
        }
        catch (Exception e) {
            _notificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Error,
                Summary = "Unable to start interface",
                Detail = e.Message
            });
        }
    }
    
    void StopInterface() {
        try {
            _wireguardService.StopInterface((Interface) Peer);
            if (!ReloadPageAfterInterfaceStatusChanged) return;
            // TODO: find a more elegant way to update the up/down badge
            _navigationManager.NavigateTo(_navigationManager.Uri, true);
        }
        catch (Exception e) {
            _notificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Error,
                Summary = "Unable to stop interface",
                Detail = e.Message
            });
        }
    }

    #endregion

    async Task ShowQrCode(IWireguardPeer peer) {
        var qr = $"data:image/png;base64, {Convert.ToBase64String(_webHelper.GetQrCode(peer))}" ;
        await _dialogService.OpenAsync($"Configuration of {peer.Name}", ds =>
            @<div>
                <div class="row">
                    <div class="col text-center">
                        <RadzenImage Path="@qr" Style="display: block; width: 25rem;"/>
                    </div>
                </div>
            </div>, 
            new DialogOptions {
                Style = "min-height:auto;min-width:auto;width:auto"
            }
            );
    }
    
    async Task ConfirmRemoveWireguardPeer(IWireguardPeer peer) {
        var peerType = peer.GetType().Name.ToLower();
        var remove = await _dialogService.Confirm(
            $"Are you sure you want to delete {peer.Name}? This cannot be undone.", 
            $"Delete {peerType} {peer.Name}",
            new ConfirmOptions {
                OkButtonText = "Yes",
                CancelButtonText = "No",
                CloseDialogOnOverlayClick = true,
            });
        if (remove == default || !remove.Value) return;
        RemovePeer();
        
        void RemovePeer() {
            try {
                _webHelper.RemoveWireguardModel(peer);
                AfterDelete?.Invoke();
            }
            catch (Exception e) {
                _notificationService.Notify(new NotificationMessage {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Unable to remove {peerType} {peer.Name}",
                    Detail = e.Message
                });
            }
        }
    }
    
    void EditWireguardPeer(IWireguardPeer peer) {
        _navigationManager.NavigateTo($"{peer.GetType().Name.ToLower()}/{peer.Id}");
    }

}
